from abc import ABC, abstractmethod

MAX_FILE_SIZE = 100_000


class AbstractContentFetcher(ABC):
    """
    Interface for content fetchers.
    """

    @abstractmethod
    def get_content(self, repository: str, path: str = "", depth: int = 2, ref: str = "HEAD") -> str:
        """Get content from repository.

        Args:
            repository: Repository path (e.g., "git.divar.cloud/divar/rpc/autogenerated/divar-interface-swift")
            path: File or directory path (e.g., "Sources/DivarInterfaceClient/divar_interface_sms_sms.grpc.swift")
            depth: Tree depth for directory listings
            ref: Git reference (branch, tag, or commit SHA)

        Returns:
            File content if path is a file, directory tree if path is a directory

        Raises:
            ValueError: If repository or path does not exist
        """
        ...


class ContentFetcherFactory:
    """Factory class for creating content fetcher instances based on configuration."""

    @staticmethod
    def create_fetcher(backend: str, **kwargs) -> AbstractContentFetcher:
        """Create a content fetcher based on the specified backend.

        Args:
            backend: Backend type ('zoekt' or 'sourcegraph')
            **kwargs: Additional arguments passed to the fetcher constructor

        Returns:
            ContentFetcherProtocol: Configured content fetcher instance

        Raises:
            ValueError: If backend is not supported or required config is missing
        """
        if backend == "sourcegraph":
            return ContentFetcherFactory._create_sourcegraph_fetcher(**kwargs)
        elif backend == "zoekt":
            return ContentFetcherFactory._create_zoekt_fetcher(**kwargs)
        else:
            raise ValueError(f"Unsupported content fetcher backend: {backend}")

    @staticmethod
    def _create_sourcegraph_fetcher(**kwargs) -> "SourcegraphContentFetcher":
        """Create and configure a Sourcegraph content fetcher.

        Args:
            **kwargs: Must include 'endpoint', may include 'token'

        Returns:
            SourcegraphContentFetcher: Configured Sourcegraph content fetcher

        Raises:
            ValueError: If required configuration is missing
        """
        from backends.sourcegraph.fetcher import SourcegraphContentFetcher

        endpoint = kwargs.get("endpoint")
        token = kwargs.get("token", "")

        if not endpoint:
            raise ValueError("Sourcegraph backend requires endpoint parameter")

        return SourcegraphContentFetcher(endpoint=endpoint, token=token)

    @staticmethod
    def _create_zoekt_fetcher(**kwargs) -> "ZoektContentFetcher":
        """Create and configure a Zoekt content fetcher.

        Args:
            **kwargs: Must include 'zoekt_url'

        Returns:
            ZoektContentFetcher: Configured Zoekt content fetcher
        """
        from backends.zoekt.fetcher import ZoektContentFetcher

        zoekt_url = kwargs.get("zoekt_url")

        if not zoekt_url:
            raise ValueError("Zoekt backend requires zoekt_url parameter")

        return ZoektContentFetcher(zoekt_url=zoekt_url)
