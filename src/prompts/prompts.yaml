# Tool descriptions
tools:
  search:
    zoekt: >
      Search codebases using the Zoekt search engine.
      
      **Workflow with other tools:**
      1. Call `search_prompt_guide` first when unfamiliar with query syntax
      2. Start by searching for repositories (`type:repo`) to identify relevant codebases
      3. Use `fetch_content` to explore repository structure and understand the codebase
      4. Refine searches with specific file paths, language filters, and patterns
      5. Balance between search and fetch_content - search is for discovery, fetch_content is for detailed exploration

      **Quick Reference:**
      - Default search: `error handler` (searches everywhere)
      - Search repository names: `r:repo_name type:repo`
      - Repository name filter: `r:my-project` or `repo:github.com/org/project`
      - File path filter: `f:\.go$` or `file:src/.*\.py`
      - Language filter: `lang:python` or `lang:go`
      - Negation: `-f:test` (exclude test files)

      **Examples:**
      1. Find Go function definitions: `"func SendMessage" lang:go`
      2. Find Python class definitions: `"class UserService" lang:python`
      3. Find Go struct definitions: `"type UserService struct" lang:go`
      4. Find API endpoints: `router.Get lang:go` or `"@app.route" lang:python`
      5. Find configuration files: `f:config` or `f:\.env$`
      6. Exclude test files: `SendMessage -f:test`
      7. Find repositories: `r:github.com/kubernetes type:repo`

      # Tips
      - Don't search for more than three different keywords at once (e.g., `foo bar baz bat`)
      - Group phrases with quotes "" and combine keywords with AND/OR operators
      
    sourcegraph: >
      Search codebases using Sourcegraph.
      
      **Workflow with other tools:**
      1. Call `search_prompt_guide` first when unfamiliar with query syntax
      2. Start by searching for repositories (`type:repo`) to identify relevant codebases
      3. Use `fetch_content` to explore repository structure and understand the codebase
      4. Refine searches with specific file paths, language filters, and patterns
      5. Balance between search and fetch_content - search is for discovery, fetch_content is for detailed exploration
      
      **Quick Reference:**
      - Default search: `error handler` (searches file content)
      - Repository filter: `repo:github\.com/org/project` (regex)
      - File path filter: `file:\.go$` or `f:src/`
      - Language filter: `lang:python` or `language:go`
      - Negation: `-file:test` (exclude test files)
      - Boolean operators: `error AND handler`, `lang:java OR lang:kotlin`
      - Symbol search: `type:symbol` for functions/classes
      - Repository search: `r:repo_name type:repo` for finding repos

      **Examples:**
      1. Find Go function definitions: `"func SendMessage" lang:go`
      2. Find Python class definitions: `"class UserService" lang:python`
      3. Find Go struct definitions: `"type UserService struct" lang:go`
      4. Find API endpoints: `router.Get lang:go` or `"@app.route" lang:python`
      5. Find configuration files: `f:config` or `f:\.env$`
      6. Exclude test files: `SendMessage -f:test`
      7. Find repositories: `r:github.com/kubernetes type:repo`

      # Tips
      - Don't search for more than three different keywords at once (e.g., `foo bar baz bat`)
      - Group phrases with quotes "" and combine keywords with AND/OR operators
      
  search_prompt_guide:
    zoekt: >
      Generates a Zoekt-specific query guide to help construct effective searches.
      You MUST CALL THIS TOOL EXACTLY ONCE IN THE BEGINNING BEFORE ANY search or fetch_content
    sourcegraph: >
      Generates a Sourcegraph-specific query guide to help construct effective searches.
      You MUST CALL THIS TOOL EXACTLY ONCE IN THE BEGINNING BEFORE ANY search or fetch_content
  fetch_content: >
    Fetches file content or directory structure from repositories.
    
    **Workflow integration:**
    1. After finding repositories with `search`, use this to explore their structure
    2. Start with root directory (empty path) to understand project layout
    3. Check README.md and documentation files for context
    4. Navigate to specific directories based on initial exploration
    5. Fetch specific files found through search results
    
    **Important**: Use this tool strategically in conjunction with search - avoid excessive calls that may impact performance.
    
    **Best practices:**
    - Always start with repository root to understand structure
    - Look for common patterns: `cmd/`, `src/`, `pkg/`, `internal/`, `api/`
    - Check configuration files: `package.json`, `go.mod`, `requirements.txt`
    - Read documentation: `README.md`, `CONTRIBUTING.md`, `docs/`

    Parameters:
    - repo: Repository path (e.g., "github.com/org/project")
    - path: File or directory path within the repository (optional)

    Returns:
    - If path is a file: Returns the file content
    - If path is a directory or empty: Returns directory tree listing (depth 2)

    Examples:
    # Get repository root structure (always start here)
    repo: "github.com/kubernetes/kubernetes"
    path: ""

    # Check project documentation
    repo: "github.com/kubernetes/kubernetes"
    path: "README.md"

    # Explore source directory
    repo: "github.com/golang/go"
    path: "src"

    # Get specific file content
    repo: "github.com/golang/go"
    path: "src/runtime/proc.go"

    # Check package configuration
    repo: "github.com/facebook/react"
    path: "package.json"

# Guides
guides:
  codesearch_guide:
    zoekt: >
      # Zoekt Query Language Guide

      This guide explains the Zoekt query language for searching code.

      ## Syntax Overview

      A query is made up of expressions:
      - Negation (e.g., `-`)
      - Field (e.g., `repo:`)
      - Grouping (e.g., parentheses `()`)

      Logical `OR` operations combine expressions. **`AND` is implicit** (space-separated).

      ## Query Components

      ### Fields

      | Field | Aliases | Values | Description | Examples |
      |-------|---------|--------|-------------|----------|
      | `content:` | | Text (string or regex) | Searches file content | `content:"search term"` |
      | `file:` | `f:` | Text (string or regex) | Searches file names | `file:"main.go"` |
      | `lang:` | `l:` | Text | Filters by programming language | `lang:python` |
      | `repo:` | `r:` | Text (string or regex) | Filters repositories by name | `repo:"github.com/user/project"` |
      | `type:` | `t:` | `filematch`, `filename`, `file`, or `repo` | Limits result types | `type:repo` |

      ### Negation
      Negate expressions using `-`:
      - `-repo:"github.com/example/repo"` - Exclude repository
      - `-lang:javascript` - Exclude language
      - `-f:test` - Exclude test files

      ### Grouping
      Use parentheses `()` for complex logic:
      - `(repo:repo1 or repo:repo2)`
      - `content:test (lang:python or lang:javascript)`

      ### Logical Operators
      - `or` combines expressions: `lang:go or lang:java`
      - `and` is implicit (space-separated)

      ## Special Query Types

      ### Result Type Control
      - `type:filematch` - File content matches (default)
      - `type:filename` - Only matching filenames
      - `type:repo` - Only repository names

      ## Examples

      1. **Search Python files in public repos**:
         ```
         lang:python public:yes content:"my_function"
         ```

      2. **Exclude archived repos with regex**:
         ```
         archived:no regex:/error.*handler/
         ```

      3. **Find README.md in forks**:
         ```
         file:"README.md" fork:yes
         ```

      4. **Search in test files specifically**:
         ```
         f:test SendMessage lang:go
         ```

      5. **Combine multiple fields**:
         ```
         (repo:"github.com/example" or repo:"github.com/test") lang:go
         ```

      ## Progressive Search Strategy
      1. **Start broad**: `ProcessOrder` - search everywhere
      2. **Find repositories**: `ProcessOrder type:repo` - discover relevant repos
      3. **Explore with fetch_content**: Use found repos to understand structure
      4. **Add language**: `ProcessOrder lang:go` - narrow by language
      5. **Find definitions**: `"func ProcessOrder" lang:go` - exact function
      6. **Exclude tests**: `ProcessOrder -f:test lang:go` - implementation only
      7. **Specific repos**: `ProcessOrder r:order-service lang:go` - targeted search

      ## Common Patterns
      - **Find repo names**: `r:repo_name type:repo`
      - **Go functions**: `"func FunctionName" lang:go`
      - **Python functions**: `"def function_name" lang:python`
      - **Go types**: `"type TypeName struct" lang:go`
      - **Python classes**: `"class ClassName" lang:python`
      - **Imports**: `"import packagename" lang:go`
      - **Test files**: `f:_test\.go` or `f:test_.*\.py`
      - **Config files**: `f:config` or `f:\.env` or `f:.*\.yaml`

      ## Search → Explore → Refine Cycle
      1. **Search**: Find repositories first, then search for code patterns
      2. **Explore**: Use `fetch_content` systematically:
         - Empty path for repository structure overview
         - README.md and docs/ for understanding the project
         - Key directories based on language conventions (src/, pkg/, lib/, cmd/)
      3. **Refine**: Create targeted queries based on discoveries:
         - Use file patterns matching the project structure
         - Search for exact phrases found in the codebase
         - Filter by specific paths or languages

      # Tips
      - Always use fetch_content to understand repository structure before deep searches
      - Avoid overly complex regex searches
      - Avoid broad searches or searching for multiple unrelated keywords in one query - this will only generate noise.

      ## Recommended Workflow
      1. First identify the repositories containing your target code
      2. Start with moderately broad searches and progressively refine them
      3. Use `fetch_content` with empty path to explore repository structure
      4. Check README.md and documentation files for context
      5. Use `fetch_content` to examine specific files from search results

      Remember: Start simple, explore repositories with fetch_content, then add filters incrementally.

      Use this guide to create an effective Zoekt query for your objective and call the search tool accordingly.
    sourcegraph: >
      # Sourcegraph Query Language Guide

      This guide explains the Sourcegraph query language for searching code.

      ## Syntax Overview

      A Sourcegraph query consists of:
      - **Search pattern**: Terms to search (e.g., `println`)
      - **Search filters**: Scope limiters (e.g., `lang:java`)

      ## Search Pattern Types

      ### Keyword Search (Default)
      | Pattern | Description | Example |
      |---------|-------------|---------|
      | `foo bar` | Match both terms anywhere | `error handler` |
      | `"foo bar"` | Match exact phrase | `"connection error"` |
      | `/foo.*bar/` | Regular expression | `/func.*test/` |
      | `foo OR bar` | Match either term | `error OR warning` |

      ### Regular Expression Mode
      Enable with `patterntype:regexp` or `(.*)`  toggle.

      ## Filters Reference

      ### General Filters
      | Filter | Description | Examples |
      |--------|-------------|----------|
      | `repo:regexp` | Include repos matching pattern | `repo:github\.com/sourcegraph` |
      | `-repo:regexp` | Exclude repos | `-repo:test` |
      | `file:regexp` | Include files matching path | `file:\.go$` |
      | `-file:regexp` | Exclude files | `-file:test` |
      | `lang:name` | Filter by language | `lang:typescript` |
      | `type:symbol` | Symbol search | `type:symbol HTTPServer` |
      | `type:repo` | Repository search | `type:repo backend` |

      ### Advanced Filters
      | Filter | Description | Examples |
      |--------|-------------|----------|
      | `select:repo` | Show only repos | `error select:repo` |
      | `select:file` | Show only files | `TODO select:file` |

      ## Boolean Operators

      - **AND**: Space between terms (implicit) or explicit `AND`
      - **OR**: Use `OR` between terms
      - **NOT**: Use `NOT` or `-` prefix

      ```
      lang:go AND error
      lang:java OR lang:kotlin
      error NOT test
      error -warning
      ```

      ## Examples

      1. **Find Python class definitions**:
         ```
         class MyClass lang:python
         ```

      2. **Find function implementations**:
         ```
         SendMessage lang:go -file:test
         ```

      3. **Search multiple repos**:
         ```
         repo:org/projectA|org/projectB error
         ```

      4. **Exclude test files**:
         ```
         func Process -file:test -file:mock
         ```

      5. **Find TODOs in Go**:
         ```
         TODO lang:go select:file
         ```

      ## Progressive Search Strategy
      1. **Start broad**: `ProcessOrder` - search everywhere
      2. **Find repositories**: `ProcessOrder type:repo` - discover relevant repos
      3. **Explore with fetch_content**: Use found repos to understand structure
      4. **Progressively refine**: Make your searches more specific based on initial results
      5. **Exclude noise**: Remove test files or other irrelevant results: `ProcessOrder -file:test lang:go`
      6. **Target repos**: `repo:order-service ProcessOrder lang:go` - specific

      ## Common Patterns
      - **Function definitions**: `type:symbol FunctionName lang:go` or normal search if you want to view the implementation.
      - **Class definitions**: `"class ClassName" lang:python`
      - **Literal search**: `"func ProcessOrder" lang:go`
      - **API routes**: `router.HandleFunc lang:go`
      - **Imports**: `"from package" lang:python`
      - **Test exclusion**: `-file:test -file:mock -file:stub`
      - **Config files**: `file:config` or `file:\.env`

      ## Search → Explore → Refine Cycle
      1. **Search**: Use broad terms to find relevant code
      2. **Explore**: Use `fetch_content` on discovered repositories:
         - Empty path for repository overview
         - README.md and docs/ for context
         - Common directories: src/, lib/, pkg/, app/

      
      ## Tips
      - Start simple, add filters incrementally
      - Use quotes for exact phrases: `"error handler"`
      - Escape special chars: `\.` for literal dot
      - Combine filters: `repo:backend lang:go file:handler`
      - Don't do too complex regex searches
      - Avoid broad searches or searching for multiple unrelated keywords in one query - this will only generate noise 

      ## Recommended Workflow
      1. First identify the repositories containing your target code
      2. Start with moderately broad searches and progressively refine them
      3. Use `fetch_content` with empty path to explore repository structure
      4. Check README.md and documentation files for context
      5. Use `fetch_content` to examine specific files from search results

      Remember: Start simple, explore repositories with fetch_content, then add filters incrementally.

      Use this guide to create an effective Sourcegraph query for your objective and call the search tool accordingly.

  org_guide: "" # fill this prompt with specific knowledge on your organization

# Agent prompts
agents:
  code_snippet_finder:
    system_prompt: |
      You are an expert code search assistant that helps find relevant code snippets from the codebase.
      Your goal is to find the most relevant and useful code snippets that answer the user's question.
      Also list all the files that you found helpful to answer the user's query from the codebase.
    user_prompt: |
      Question: {{ question }}
  query_reformater:
    system_prompt: |
      The user does not have much knowledge of the codebase, but they have a query that they want answered.
      Use the tools at your disposal and analyze the codebase alongside the user's query.
      Return a list of options that could better reformulate the user's query. Don't try to answer the question, just reformulate it and return the options.

    user_prompt: |
      Question: {{ question }}
  code_agent_type_parser:
    system_prompt: |
      Extract all values corresponding to data type fields from the given natural language user input.
    user_prompt: |
      User Input: {{ user_input }}
  evaluate:
    system_prompt: |
      You are an expert solution evaluation judge specializing in code and software engineering instructions. 
      You are given a question, the expected answer, and the proposed answer by an agent.
      Your role is to assess whether the proposed answer conveys the same essential information as the expected answer.
      
      **Important:** You are comparing code/software engineering instructions. Focus on whether following the proposed 
      instructions would lead to a similar functional result as the expected answer, not on exact wording or formatting.

      You must:
      1. Verify if the proposed answer correctly addresses the original question like the expected answer.
      2. Assess whether following the proposed instructions would achieve the same goal as the expected answer.
      3. Provide a pass/fail judgement based on functional equivalence, not superficial differences.

      **Evaluation Criteria:**
        
        *** Pass Conditions:
          - The proposed answer contains all essential information needed to complete the task
          - Following the proposed instructions would lead to a functionally similar result
          - Core logic, algorithms, or architectural decisions are preserved
          - Any critical dependencies, configurations, or setup steps are mentioned
          - The answer addresses the same problem scope as expected
          
        *** Fail Conditions:
          - Missing critical implementation details that would prevent successful completion
          - Incorrect logic or algorithms that would produce different results
          - Missing essential error handling or edge cases explicitly covered in expected answer
          - Omitting required dependencies or configuration that would cause failures
          - Fundamentally different approach that doesn't solve the stated problem

      **Programming Context Examples to Consider:**
        
        ✓ SHOULD PASS even with these differences:
          - Different variable/function names (e.g., getUserData vs fetchUserInfo)
          - Alternative but equivalent syntax (e.g., async/await vs .then() promises)
          - Different code organization (e.g., single function vs multiple helper functions)
          - Minor formatting or style differences
          - Using different but compatible libraries for the same purpose
          - Additional helpful comments or documentation
          - More verbose or concise implementations that achieve the same result
          
        ✗ SHOULD FAIL for these issues:
          - Wrong algorithm complexity (e.g., O(n²) instead of O(n log n) when specified)
          - Missing critical error handling (e.g., no null checks when dealing with optional data)
          - Incorrect API endpoints or database queries
          - Missing authentication/authorization when security is required
          - Wrong data structures that would affect performance or functionality
          - Omitting concurrency handling in multi-threaded contexts
          - Missing critical business logic or validation rules

    user_prompt: |
      Question: {{ question }}
      
      Actual Answer: 
      ```
      {{ actual_answer }}
      ```
      
      Expected Answer:
      ```
      {{ expected_answer }}
      ```

# Context provider
context_provider:
  tools:
    agentic_search:
      description: >
        **Use this tool when you need to search codebases for specific code snippets or implementation details.**

        This tool performs an intelligent code search across codebases using natural language questions.
        It returns relevant code snippets with descriptions to help answer questions about architecture,
        implementations, and codebase patterns.

        **IMPORTANT: Always call `refactor_question` first to get better search queries, then use the reformulated 
        questions with this tool for more accurate results.**

        Parameters:
        - question: The natural language question to search for in the codebase
        
        Returns:
        - CodeSnippetResult:
          - code: relevant code snippet from codebase
          - language: programming language of the code snippet
          - description: detailed description explaining how this code relates to your question
    refactor_question:
      description: >
        **Use this tool FIRST when you have questions about codebases or need specific context.**

        This tool analyzes your question and reformulates it into more targeted queries that are
        optimized for searching codebases. It leverages knowledge of common patterns and architectures
        to suggest better search terms and approaches.

        **WORKFLOW: Always call this tool first when dealing with codebase questions, then use the 
        suggested queries with `agentic_search` for best results.**

        Parameters:
        - question: The natural language question about codebase to reformulate

        Returns:
        - suggested_queries: list of reformulated queries optimized for codebase search, 
          designed to be used with the agentic_search toolu
